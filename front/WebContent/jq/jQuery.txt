jQUery(document).ready(function(){});
$(document).ready(function(){});
$(function(){});
=> 같은 표현
window.addEventListener('load', function(){});
=> 거의 비슷한 ES5 

window.addEventListener('load', function(){});
과
jQUery(document).ready(function(){});
$(document).ready(function(){});
$(function(){});
의 차이점은 
ES5에서 'load' 이벤트는 image등의 네트워킹이 느린 자원이 전부 로드된 다음에 발생하는 이벤트

jQUery의 ready()는 네트워킹이 느린 자원이 로드되기 전에 실행될 수 있다.

jQuery는 메소드 이름 하나로 get/set메소드로 사용한다.

jQuery객체는 jQuery, JavaScript 문법 둘다 사용가능

Ajax!
```
$.ajax({
    method : 'POST',
    url : '../login.jsp',
//  data : 'id=sad&pwd=123'
    data : {
        "id" : "sad",
        "pwd" : 123
    },
    success : function(data, textStatus, jqXHR){

    },
    error : function(jqXHR, textStatus, errorThrown){

    }
});
```

jQuery로 call back hell을 벗어나는 방법
    .on()
동적으로 생성되는 DOM 객체를 기다려 Event 를 처리하는 방법

$("div").html("");
$("div").empty(); 
-> Element 지우기

document.querySelector("div").style.backgroundColor = "yellow";
$("div").css("background-color", "yellow"); 
// css()에 파라미터가 2개이면 property를 설정하는 set()메소드
// css()에 파라미터가 1개이면 property를 가져오는 get()메소드

find() -> 해당 객체의 자식 요소들을 찾을 수 있는 메소드
$("선택자").click(function(){
    $(this).find("자식1찾기").html();
    $(this).find("자식2찾기").html();
});

$(this)는 콜백 함수를 포함하고있는 객체를 bind한다. $("선택자")

serialize() -> 데이터 전송시 setting 해야될 프로퍼티 세팅 작업을 간편하게 해주는 메소드
input의 name 어트리뷰트를 키로 value를 값으로 프로퍼티세팅을 해서 문자열로 만들어준다.
form 태그에만 사용가능 form 태그의 자식 input 태그를 모두 포함한다.
